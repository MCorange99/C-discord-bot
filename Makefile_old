.SILENT: config

ORCA = orca

CC ?= gcc
OBJDIR := .obj
LIBDIR := $(ORCA)/lib

# add your source files here
SRC  := main.c
# this will match each individual .c file to a .o
OBJS := $(SRC:%.c=$(OBJDIR)/%.o)
# your bot executable's name
MAIN := myBot

CONF := config.json

# -O0 no optimization
# -Wall emit 'all' warnings
# -g keep this for human-readable debugging
# -pthread tell the compiler to link the pthread library
#  			aswell configure compilation for threads
# -I add header folder to compiler search path
CFLAGS  := -O0 -g -Wall -pthread                         \
           -I. -I$(ORCA) -I$(ORCA)/cee-utils             \
           -I$(ORCA)/common -I$(ORCA)/common/third-party

all: $(MAIN) $(CONF)

$(MAIN): $(OBJS)
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

$(OBJS): | $(OBJDIR)

$(OBJDIR):
	@ mkdir -p $(OBJDIR)

# Match each .o file to its .c counterpart (foo.o: foo.c)
$(OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

$(CONF):
	cp -n config_example.json $(CONF)
	echo "A template config file was copied into this folder."
	echo "Replace 'YOUR-BOT-TOKEN' with an actual token at $(CONF)"

clean:
	rm -rf $(MAIN)
	rm -rf $(OBJDIR)

echo:
	@ echo -e 'CC: $(CC)\n'
	@ echo -e 'ORCA: $(ORCA)\n'
	@ echo -e 'SRC: $(SRC)\n'
	@ echo -e 'OBJS: $(OBJS)\n'
	@ echo -e 'MAIN: $(MAIN)\n'

.PHONY: all clean config
